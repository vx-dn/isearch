name: üîß Hybrid Flexible CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      run_tests:
        description: 'Run full test suite'
        required: false
        default: true
        type: boolean
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-southeast-1
  PYTHON_VERSION: "3.10"

jobs:
  # =====================================
  # REUSABLE VALIDATION
  # =====================================
  validate:
    name: üîç Code Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      has-backend-changes: ${{ steps.changes.outputs.backend }}
      has-infrastructure-changes: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'backend/**'
            infrastructure:
              - 'infrastructure/**'
            deploy:
              - 'backend/deploy/**'
            should-deploy:
              - 'backend/**'
              - 'infrastructure/**'

      - name: üêç Setup Python
        if: steps.changes.outputs.backend == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install Python dependencies
        if: steps.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: üé® Code formatting
        if: steps.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: black --check --diff .

      - name: üîç Linting
        if: steps.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: flake8 --max-line-length=88 --extend-ignore=E203,W503 .

      - name: üõ°Ô∏è Security scan
        if: steps.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: bandit -r . -x tests/ || true

      - name: ‚öôÔ∏è Validate Terraform
        if: steps.changes.outputs.infrastructure == 'true'
        working-directory: infrastructure/terraform
        run: |
          curl -fsSL https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip -o terraform.zip
          unzip terraform.zip
          chmod +x terraform
          ./terraform fmt -check
          ./terraform init -backend=false
          ./terraform validate

  # =====================================
  # SMART TESTING
  # =====================================
  test-unit:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ needs.validate.outputs.has-backend-changes == 'true' && (inputs.run_tests || github.event_name != 'workflow_dispatch') }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: üß™ Run unit tests
        working-directory: ./backend
        run: |
          pytest tests/unit/ \
            --cov=src \
            --cov-report=xml \
            --junitxml=junit.xml \
            --tb=short

      - name: üìä Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: unit-tests

  test-integration:
    name: üîó Integration Tests  
    runs-on: ubuntu-latest
    needs: [validate, test-unit]
    if: ${{ needs.validate.outputs.has-backend-changes == 'true' && github.ref == 'refs/heads/main' }}
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: s3,dynamodb,sqs
        ports:
          - 4566:4566
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üîó Run integration tests
        working-directory: ./backend
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
        run: |
          pytest tests/integration/ \
            --tb=short \
            -v

  # =====================================
  # INFRASTRUCTURE DEPLOYMENT
  # =====================================
  deploy-infrastructure:
    name: üèóÔ∏è Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ inputs.deploy_infrastructure && needs.validate.outputs.has-infrastructure-changes == 'true' }}
    environment: 
      name: ${{ inputs.environment }}-infrastructure
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: ‚öôÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üèóÔ∏è Deploy infrastructure
        working-directory: infrastructure/terraform
        run: |
          terraform init
          terraform plan -var-file=environments/${{ inputs.environment }}.tfvars
          terraform apply -var-file=environments/${{ inputs.environment }}.tfvars -auto-approve

  # =====================================
  # APPLICATION DEPLOYMENT
  # =====================================
  deploy-dev:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, test-unit]
    if: ${{ needs.validate.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/develop' || inputs.environment == 'dev') }}
    environment: development
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üöÄ Deploy Lambda functions
        working-directory: ./backend/deploy
        env:
          MEILISEARCH_MASTER_KEY: ${{ secrets.MEILISEARCH_MASTER_KEY }}
        run: |
          chmod +x deploy_lambda.sh test_deployment.sh
          ./deploy_lambda.sh --all --environment dev
          ./test_deployment.sh

  deploy-staging:
    name: üé≠ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, test-unit, test-integration]
    if: ${{ needs.validate.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/main' || inputs.environment == 'staging') }}
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.api_url }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üöÄ Deploy to staging
        id: deploy
        working-directory: ./backend/deploy
        env:
          MEILISEARCH_MASTER_KEY: ${{ secrets.MEILISEARCH_MASTER_KEY_STAGING }}
        run: |
          chmod +x deploy_lambda.sh test_deployment.sh
          ./deploy_lambda.sh --all --environment staging
          ./test_deployment.sh
          
          # Output API URL
          cd ../../infrastructure/terraform
          API_URL=$(terraform output -raw api_gateway_url)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: ${{ inputs.environment == 'prod' && github.ref == 'refs/heads/main' }}
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.api_url }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üè≠ Deploy to production
        id: deploy
        working-directory: ./backend/deploy
        env:
          MEILISEARCH_MASTER_KEY: ${{ secrets.MEILISEARCH_MASTER_KEY_PROD }}
        run: |
          chmod +x deploy_lambda.sh test_deployment.sh
          ./deploy_lambda.sh --all --environment prod
          ./test_deployment.sh
          
          # Output API URL
          cd ../../infrastructure/terraform
          API_URL=$(terraform output -raw api_gateway_url)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: üéâ Success notification
        run: |
          echo "üéâ Production deployment successful!"
          echo "üîó API URL: ${{ steps.deploy.outputs.api_url }}"

  # =====================================
  # ROLLBACK CAPABILITY
  # =====================================
  rollback:
    name: üîÑ Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: rollback-approval
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîÑ Rollback instructions
        run: |
          echo "üîÑ To rollback, run the following commands:"
          echo "cd backend/deploy"
          echo "./deploy_lambda.sh --all --environment ${{ inputs.environment }} --rollback"
          echo ""
          echo "Or use the stop/start services for immediate cost savings:"
          echo "./stop_services.sh"